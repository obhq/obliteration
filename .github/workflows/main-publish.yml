name: Release Compilation

on:
  push:
      tags:
      - 'v*.*.*'

env:
  version: ${{ github.ref_name }}

concurrency: ci-${{ github.ref }}
jobs:
  build_release:
    name: Build Releases
    strategy:
      matrix:
        os: [windows-2019, ubuntu-20.04]
        include:
          - os: windows-2019
            release_suffix: Windows
          - os: ubuntu-20.04
            release_suffix: Ubuntu
    runs-on: ${{ matrix.os }}
    steps:
    # Checkout and Install QT (Both OSes)
    
      - name: Checkout source
        uses: actions/checkout@v3
        with:
          submodules: recursive
          
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: 6.2.*
          
    # Windows Specific Setup
    
      - name: Install Vulkan SDK (Windows)
        if: matrix.release_suffix == 'Windows'
        run: |
          Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.224.1/windows/VulkanSDK-1.3.224.1-Installer.exe" -OutFile VulkanSDK.exe
          .\VulkanSDK.exe --root C:\VulkanSDK  --accept-licenses --default-answer --confirm-command install
          echo "VULKAN_SDK=C:\VulkanSDK" >> $env:GITHUB_ENV
          
      - name: Initialize VCPKG (Windows)
        if: matrix.release_suffix == 'Windows'
        run: .\vcpkg\bootstrap-vcpkg.bat
        
      - name: Install VCPKG packages (Windows)
        if: matrix.release_suffix == 'Windows'
        run: .\vcpkg-restore.ps1
        
    # Ubuntu Specific Setup
    
      - name: Install system dependencies (Ubuntu)
        if: matrix.release_suffix == 'Ubuntu'
        run: |
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-1.3.224-focal.list https://packages.lunarg.com/vulkan/1.3.224/lunarg-vulkan-1.3.224-focal.list
          sudo apt-get update
          sudo apt-get install -y libxkbcommon-dev vulkan-sdk
          echo "VULKAN_SDK=/usr" >> $GITHUB_ENV
          
      - name: Initialize VCPKG (Ubuntu)
        if: matrix.release_suffix == 'Ubuntu'
        run: ./vcpkg/bootstrap-vcpkg.sh
        
      - name: Install VCPKG packages (Ubuntu)
        if: matrix.release_suffix == 'Ubuntu'
        run: ./vcpkg-restore.sh
        
    # Build and Release (Both OSes)
    
      - name: Run CMake
        run: cmake -B build -D CMAKE_BUILD_TYPE=Release
        
      - name: Build 
        run: cmake --build build --config Release
        
      - name: Export artifacts
        run: cmake --install build --prefix dist
        
      - name: ZIP Obliteration (WINDOWS ONLY | UBUNTU BROKEN)
        if: matrix.release_suffix == 'Windows'
        uses: TheDoctor0/zip-release@main
        with:
          type: 'zip'
          path: './dist/*'
          filename: Obliteration-${{ env.version }}-${{ matrix.release_suffix }}.zip
          
      - name: Release Executable (WINDOWS ONLY | UBUNTU BROKEN)
        if: matrix.release_suffix == 'Windows'
        uses: ncipollo/release-action@v1.11.1
        with:
          artifacts: "Obliteration-${{ env.version }}-${{ matrix.release_suffix }}.zip"
          generateReleaseNotes: true
          name: Release ${{ env.version }}
          tag: ${{ env.version }}
          token: ${{ secrets.GITHUB_TOKEN }}
          allowUpdates: true
