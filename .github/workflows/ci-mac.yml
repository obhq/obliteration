name: CI (Mac)
on:
  workflow_call:
env:
  CMAKE_BUILD_PARALLEL_LEVEL: '3'
jobs:
  llvm:
    name: LLVM for Mac
    runs-on: macos-12
    outputs:
      dist-key: ${{ steps.cache-keys.outputs.dist }}
    env:
      LLVM_URL: https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.5/llvm-project-17.0.5.src.tar.xz
    steps:
    - name: Generate cache keys
      run: |
        hash=$(md5 -qs "$LLVM_URL")
        echo "dist=${{ runner.os }}-llvm-$hash" >> $GITHUB_OUTPUT
      id: cache-keys
    - name: Check cached artifacts
      uses: actions/cache/restore@v4
      with:
        path: lib/llvm
        key: ${{ steps.cache-keys.outputs.dist }}
        lookup-only: true
      id: cache
    - name: Download LLVM
      run: |
        curl -Lo llvm.tar.xz "$LLVM_URL"
        tar -xJ --strip-components=1 -f llvm.tar.xz
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
    - name: Run CMake
      run: cmake --install-prefix ${{ github.workspace }}/lib/llvm -Wno-dev -DCMAKE_BUILD_TYPE:STRING=Release -DLLVM_ENABLE_ZSTD:BOOL=OFF -DLLVM_APPEND_VC_REV:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=X86 -B build llvm
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
    - name: Build
      run: cmake --build build --config Release
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
    - name: Export artifacts
      run: cmake --install build --config Release
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
    - name: Cache artifacts
      uses: actions/cache/save@v4
      with:
        path: lib/llvm
        key: ${{ steps.cache-keys.outputs.dist }}
      if: ${{ steps.cache.outputs.cache-hit != 'true' }}
  build:
    name: Mac
    runs-on: macos-12
    needs: llvm
    env:
      CMAKE_PREFIX_PATH: qt/6.6.0/macos
      QT_URL_BASE: https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt6_660/qt.qt6.660.clang_64/6.6.0-0-202310040910qtbase-MacOS-MacOS_12-Clang-MacOS-MacOS_12-X86_64-ARM64.7z
      QT_URL_SVG: https://download.qt.io/online/qtsdkrepository/mac_x64/desktop/qt6_660/qt.qt6.660.clang_64/6.6.0-0-202310040910qtsvg-MacOS-MacOS_12-Clang-MacOS-MacOS_12-X86_64-ARM64.7z
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Download LLVM
      uses: actions/cache/restore@v4
      with:
        path: lib/llvm
        key: ${{ needs.llvm.outputs.dist-key }}
        fail-on-cache-miss: true
    - name: Generate cache keys
      run: |
        require Digest::MD5;

        my $qt = Digest::MD5->new();

        foreach my $name (sort keys %ENV) {
          if ($name =~ /^QT_URL_/) {
            $qt->add($ENV{$name});
          }
        }

        open(my $output, '>>', $ENV{GITHUB_OUTPUT}) || die "Cannot open GITHUB_OUTPUT: $!";
        print $output "cargo=${{ runner.os }}-cargo\n";
        print $output "qt=${{ runner.os }}-qt-".$qt->hexdigest."\n";
      shell: perl {0}
      id: cache-keys
    - name: Restore Cargo home
      uses: actions/cache/restore@v4
      with:
        path: ~/.cargo
        key: ${{ steps.cache-keys.outputs.cargo }}
    - name: Restore Qt
      uses: actions/cache/restore@v4
      with:
        path: qt
        key: ${{ steps.cache-keys.outputs.qt }}
      id: qt-cache
    - name: Install Qt
      run: |
        env | while IFS= read -r line; do
          name=${line%%=*}
          value=${line#*=}

          if [[ $name == QT_URL_* ]]; then
            curl -Lo qt.7z "$value"
            7za x qt.7z -oqt
          fi
        done
      if: ${{ steps.qt-cache.outputs.cache-hit != 'true' }}
    - name: Update Rust
      run: rustup update stable
    - name: Run CMake
      run: cmake -DOB_BUILD_LLVM:BOOL=OFF --preset mac-release .
    - name: Build
      run: cmake --build --preset mac-release
    - name: Run tests
      run: cargo test --workspace --exclude core
      working-directory: src
    - name: Create Application Bundle
      run: |
        cmake --install build --prefix .
        mkdir dist
        mv obliteration.app dist/Obliteration.app
    - name: Fix library paths
      run: |
        app="dist/Obliteration.app/Contents/MacOS/obliteration"
        krn="dist/Obliteration.app/Contents/MacOS/obkrnl"

        install_name_tool -change '@rpath/QtWidgets.framework/Versions/A/QtWidgets' '@executable_path/../Frameworks/QtWidgets.framework/Versions/A/QtWidgets' "$app"
        install_name_tool -change '@rpath/QtGui.framework/Versions/A/QtGui' '@executable_path/../Frameworks/QtGui.framework/Versions/A/QtGui' "$app"
        install_name_tool -change '@rpath/QtCore.framework/Versions/A/QtCore' '@executable_path/../Frameworks/QtCore.framework/Versions/A/QtCore' "$app"

        otool -L "$app"
        otool -L "$krn"
    - name: Sign kernel
      run: codesign -s - --entitlements entitlements.plist dist/Obliteration.app/Contents/MacOS/obkrnl
    - name: Create Apple Disk Image
      run: hdiutil create -volname Obliteration -srcfolder dist Obliteration.dmg
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: obliteration-mac-intel
        path: Obliteration.dmg
    - name: Cache Cargo home
      uses: actions/cache/save@v4
      with:
        path: ~/.cargo
        key: ${{ steps.cache-keys.outputs.cargo }}-${{ github.run_id }}
      if: startsWith(github.ref, 'refs/heads/')
    - name: Cache Qt
      uses: actions/cache/save@v4
      with:
        path: qt
        key: ${{ steps.cache-keys.outputs.qt }}
      if: startsWith(github.ref, 'refs/heads/') && steps.qt-cache.outputs.cache-hit != 'true'
