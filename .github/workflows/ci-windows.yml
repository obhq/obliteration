name: CI (Windows)
on:
  workflow_call:
env:
  CMAKE_BUILD_PARALLEL_LEVEL: '2'
jobs:
  llvm:
    name: LLVM for Windows
    runs-on: windows-2022
    steps:
    - name: Download LLVM
      run: |
        Invoke-WebRequest -Uri "https://github.com/llvm/llvm-project/releases/download/llvmorg-16.0.6/llvm-project-16.0.6.src.tar.xz" -OutFile llvm.tar.xz
        $hash = (Get-FileHash llvm.tar.xz).Hash
        unxz llvm.tar.xz
        tar -x --strip-components=1 -f llvm.tar
        echo "hash=$hash" >> $env:GITHUB_OUTPUT
      id: download
    - name: Generate cache keys
      run: echo "build=${{ runner.os }}-llvm-${{ steps.download.outputs.hash }}" >> $env:GITHUB_OUTPUT
      id: cache-keys
    - name: Restore build files
      uses: actions/cache/restore@v3
      with:
        path: build
        key: ${{ steps.cache-keys.outputs.build }}
    - name: Run CMake
      run: cmake --install-prefix ${{ github.workspace }}/dist -Wno-dev -DLLVM_ENABLE_ZSTD:BOOL=OFF -DLLVM_APPEND_VC_REV:BOOL=OFF -DLLVM_TARGETS_TO_BUILD:STRING=X86 -B build llvm
    - name: Build
      run: cmake --build build --config Release
    - name: Cache build files
      uses: actions/cache/save@v3
      with:
        path: build
        key: ${{ steps.cache-keys.outputs.build }}-${{ github.run_id }}
      if: startsWith(github.ref, 'refs/heads/')
    - name: Export artifacts
      run: cmake --install build --config Release
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: llvm
        path: dist
  build:
    name: Windows
    runs-on: windows-2022
    needs: llvm
    steps:
    - name: Checkout source
      uses: actions/checkout@v4
    - name: Download LLVM
      uses: actions/download-artifact@v3
      with:
        name: llvm
        path: lib/llvm
    - name: Generate cache keys
      run: |
        echo "cargo=${{ runner.os }}-cargo" >> $env:GITHUB_OUTPUT
        echo "qt=${{ runner.os }}-qt" >> $env:GITHUB_OUTPUT
        echo "vulkan=${{ runner.os }}-vulkan-1.3.239.0" >> $env:GITHUB_OUTPUT
      id: cache-keys
    - name: Restore Cargo home
      uses: actions/cache/restore@v3
      with:
        path: ~/.cargo
        key: ${{ steps.cache-keys.outputs.cargo }}
    - name: Install Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: 6.*
        aqtversion: '==3.1.*'
        cache: true
        cache-key-prefix: ${{ steps.cache-keys.outputs.qt }}
    - name: Restore Vulkan SDK
      uses: actions/cache/restore@v3
      with:
        path: C:\VulkanSDK
        key: ${{ steps.cache-keys.outputs.vulkan }}
      id: restore-vulkan
    - name: Install Vulkan SDK
      run: |
        Invoke-WebRequest -Uri "https://sdk.lunarg.com/sdk/download/1.3.239.0/windows/VulkanSDK-1.3.239.0-Installer.exe" -OutFile VulkanSDK.exe
        .\VulkanSDK.exe --root C:\VulkanSDK --accept-licenses --default-answer --confirm-command install
        echo "new-install=true" >> $env:GITHUB_OUTPUT
      id: install-vulkan
      if: ${{ steps.restore-vulkan.outputs.cache-hit != 'true' }}
    - name: Set Vulkan SDK path
      run:  echo "VULKAN_SDK=C:\VulkanSDK" >> $env:GITHUB_ENV
    - name: Run CMake
      run: cmake -DOB_BUILD_LLVM:BOOL=OFF --preset windows-release .
    - name: Build
      run: cmake --build --preset windows-release
    - name: Run tests
      run: cargo test --workspace
      working-directory: src
    - name: Run Clippy
      run: cargo clippy --release
      working-directory: src
    - name: Export artifacts
      run: cmake --install build --prefix dist
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: obliteration-win-x64
        path: dist
    - name: Cache Vulkan SDK
      uses: actions/cache/save@v3
      with:
        path: C:\VulkanSDK
        key: ${{ steps.cache-keys.outputs.vulkan }}
      if: startsWith(github.ref, 'refs/heads/') && steps.install-vulkan.outputs.new-install == 'true'
    - name: Cache Cargo home
      uses: actions/cache/save@v3
      with:
        path: ~/.cargo
        key: ${{ steps.cache-keys.outputs.cargo }}-${{ github.run_id }}
      if: startsWith(github.ref, 'refs/heads/')
