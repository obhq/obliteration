// This file contains error codes used in a PS4 system. The value of each error must be the same as
// the PS4.
use std::error::Error;
use std::num::NonZeroI32;

// List of Error Codes with Names.
// Kernel based Error Codes
pub const KERNEL_EPERM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(1) };
pub const KERNEL_ENOENT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(2) };
pub const KERNEL_ESRCH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(3) };
pub const KERNEL_EINTR: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(4) };
pub const KERNEL_EIO: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(5) };
pub const KERNEL_ENXIO: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(6) };
pub const KERNEL_E2BIG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(7) };
pub const KERNEL_ENOEXEC: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(8) };
pub const KERNEL_EBADF: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(9) };
pub const KERNEL_ECHILD: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(10) };
pub const KERNEL_EDEADLK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(11) };
pub const KERNEL_ENOMEM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(12) };
pub const KERNEL_EACCES: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(13) };
pub const KERNEL_EFAULT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(14) };
pub const KERNEL_ENOTBLK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(15) };
pub const KERNEL_EBUSY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(16) };
pub const KERNEL_EEXIST: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(17) };
pub const KERNEL_EXDEV: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(18) };
pub const KERNEL_ENODEV: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(19) };
pub const KERNEL_ENOTDIR: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(20) };
pub const KERNEL_EISDIR: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(21) };
pub const KERNEL_EINVAL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(22) };
pub const KERNEL_ENFILE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(23) };
pub const KERNEL_EMFILE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(24) };
pub const KERNEL_ENOTTY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(25) };
pub const KERNEL_ETXTBSY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(26) };
pub const KERNEL_EFBIG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(27) };
pub const KERNEL_ENOSPC: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(28) };
pub const KERNEL_ESPIPE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(29) };
pub const KERNEL_EROFS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(30) };
pub const KERNEL_EMLINK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(31) };
pub const KERNEL_EPIPE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(32) };
pub const KERNEL_EDOM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(33) };
pub const KERNEL_ERANGE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(34) };
pub const KERNEL_EAGAIN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(35) };
pub const KERNEL_EINPROGRESS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(36) };
pub const KERNEL_EALREADY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(37) };
pub const KERNEL_ENOTSOCK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(38) };
pub const KERNEL_EDESTADDRREQ: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(39) };
pub const KERNEL_EMSGSIZE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(40) };
pub const KERNEL_EPROTOTYPE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(41) };
pub const KERNEL_ENOPROTOOPT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(42) };
pub const KERNEL_EPROTONOSUPPORT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(43) };
pub const KERNEL_ESOCKTNOSUPPORT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(44) };
pub const KERNEL_ENOTSUP: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(45) };
pub const KERNEL_EPFNOSUPPORT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(46) };
pub const KERNEL_EAFNOSUPPORT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(47) };
pub const KERNEL_EADDRINUSE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(48) };
pub const KERNEL_EADDRNOTAVAIL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(49) };
pub const KERNEL_ENETDOWN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(50) };
pub const KERNEL_ENETUNREACH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(51) };
pub const KERNEL_ENETRESET: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(52) };
pub const KERNEL_ECONNABORTED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(53) };
pub const KERNEL_ECONNRESET: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(54) };
pub const KERNEL_ENOBUFS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(55) };
pub const KERNEL_EISCONN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(56) };
pub const KERNEL_ENOTCONN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(57) };
pub const KERNEL_ESHUTDOWN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(58) };
pub const KERNEL_ETOOMANYREFS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(59) };
pub const KERNEL_ETIMEDOUT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(60) };
pub const KERNEL_ECONNREFUSED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(61) };
pub const KERNEL_ELOOP: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(62) };
pub const KERNEL_ENAMETOOLONG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(63) };
pub const KERNEL_EHOSTDOWN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(64) };
pub const KERNEL_EHOSTUNREACH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(65) };
pub const KERNEL_ENOTEMPTY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(66) };
pub const KERNEL_EPROCLIM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(67) };
pub const KERNEL_EUSERS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(68) };
pub const KERNEL_EDQUOT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(69) };
pub const KERNEL_ESTALE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(70) };
pub const KERNEL_EREMOTE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(71) };
pub const KERNEL_EBADRPC: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(72) };
pub const KERNEL_ERPCMISMATCH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(73) };
pub const KERNEL_EPROGUNAVAIL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(74) };
pub const KERNEL_EPROGMISMATCH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(75) };
pub const KERNEL_EPROCUNAVAIL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(76) };
pub const KERNEL_ENOLCK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(77) };
pub const KERNEL_ENOSYS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(78) };
pub const KERNEL_EFTYPE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(79) };
pub const KERNEL_EAUTH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(80) };
pub const KERNEL_ENEEDAUTH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(81) };
pub const KERNEL_EIDRM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(82) };
pub const KERNEL_ENOMSG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(83) };
pub const KERNEL_EOVERFLOW: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(84) };
pub const KERNEL_ECANCELED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(85) };
pub const KERNEL_EILSEQ: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(86) };
pub const KERNEL_ENOATTR: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(87) };
pub const KERNEL_EDOOFUS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(88) };
pub const KERNEL_EBADMSG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(89) };
pub const KERNEL_EMULTIHOP: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(90) };
pub const KERNEL_ENOLINK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(91) };
pub const KERNEL_EPROTO: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(92) };
pub const KERNEL_ENOTCAPABLE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(93) };
pub const KERNEL_ECAPMODE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(94) };
pub const KERNEL_ENOBLK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(95) };
// SRTC based Error Codes
pub const SRTC_EPOWER: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(391) };
pub const SRTC_ECLOCK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(392) };
pub const SRTC_ENOTINITIALIZED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(393) };
pub const SRTC_EXPIRED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(394) };
pub const SRTC_EFORMAT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(395) };
pub const SRTC_EAUTHFAIL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(396) };
pub const SRTC_KEY_DIFFER: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(397) };
// DevKit based Error Codes
pub const DEVACT_EPERM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(398) };
pub const DEVACT_ENOENT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(399) };
// NPDRM based Error Codes
pub const NPDRM_EACCES: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(550) };
pub const NPDRM_EFAULT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(551) };
pub const NPDRM_EBUSY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(552) };
pub const NPDRM_EEXIST: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(553) };
pub const NPDRM_ENODEV: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(554) };
pub const NPDRM_EINVAL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(555) };
pub const NPDRM_ENOSPC: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(556) };
pub const NPDRM_ERANGE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(557) };
pub const NPDRM_EFMT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(558) };
pub const NPDRM_ESIGN: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(559) };
// Auth Manager based Error Codes
pub const AUTHMGR_ESTACK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(600) };
pub const AUTHMGR_ENEEDAUTH: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(601) };
pub const AUTHMGR_EBADMSG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(602) };
pub const AUTHMGR_EREVOKED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(603) };
pub const AUTHMGR_ENOATTR: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(604) };
pub const AUTHMGR_EVER: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(605) };
pub const AUTHMGR_EPLATFORM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(606) };
pub const AUTHMGR_EPOWER: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(607) };
pub const AUTHMGR_ECLOCK: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(608) };
pub const AUTHMGR_ENOTINITIALIZED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(609) };
pub const AUTHMGR_EXPIRED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(610) };
pub const AUTHMGR_EFORMAT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(611) };
pub const AUTHMGR_EAUTHFAIL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(612) };
pub const AUTHMGR_KEY_DIFFER: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(613) };
// System File based Error Codes
pub const SYSFILE_NOMEM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(614) };
pub const SYSFILE_IO: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(615) };
pub const SYSFILE_INVAL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(616) };
pub const SYSFILE_BADMAGIC: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(617) };
pub const SYSFILE_KEYNOTFOUND: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(618) };
pub const SYSFILE_KEYDUPLICATION: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(619) };
pub const SYSFILE_BADVERSION: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(620) };
pub const SYSFILE_OVER_DATABUFSIZE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(621) };
// Safemode based Error Codes
pub const SAFEMODE_NOMEM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(772) };
pub const SAFEMODE_KILL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(773) };
pub const SAFEMODE_NOT_FOUND: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(774) };
pub const SAFEMODE_INVAL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(775) };
pub const SAFEMODE_STAT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(776) };
pub const SAFEMODE_OPEN_READ: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(777) };
pub const SAFEMODE_OPEN_WRITING: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(778) };
pub const SAFEMODE_CLOSE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(779) };
pub const SAFEMODE_READ: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(780) };
pub const SAFEMODE_WRITE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(781) };
pub const SAFEMODE_NMOUNT_USB: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(784) };
pub const SAFEMODE_RECOG_USB: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(785) };
// USBD based Error Codes
pub const USBD_IO: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(791) };
pub const USBD_INVALID_ARG: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(792) };
pub const USBD_ACCESS: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(793) };
pub const USBD_NO_DEVICE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(794) };
pub const USBD_NOT_FOUND: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(795) };
pub const USBD_BUSY: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(796) };
pub const USBD_TIMEOUT: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(797) };
pub const USBD_OVERFLOW: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(798) };
pub const USBD_PIPE: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(799) };
pub const USBD_INTERRUPTED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(800) };
pub const USBD_NO_MEM: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(801) };
pub const USBD_NOT_SUPPORTED: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(802) };
pub const USBD_FATAL: NonZeroI32 = unsafe { NonZeroI32::new_unchecked(803) };

/// An object that is mappable to PS4 errno.
pub trait Errno: Error {
    fn errno(&self) -> NonZeroI32;
}

/// Get human readable text.
pub fn strerror(num: NonZeroI32) -> &'static str {
    match num {
        // Kernel based Error Messages
        KERNEL_EPERM => "operation not permitted",
        KERNEL_ENOENT => "no such file or directory",
        KERNEL_ESRCH => "no such process",
        KERNEL_EINTR => "interrupted system call",
        KERNEL_EIO => "input/output error, access to HDD/Disc failed",
        KERNEL_ENXIO => "device not configured, access to data failed",
        KERNEL_E2BIG => "argument list too long",
        KERNEL_ENOEXEC => "exec format error",
        KERNEL_EBADF => "bad file descriptor",
        KERNEL_ECHILD => "no child processes",
        KERNEL_EDEADLK => "resource deadlock avoided",
        KERNEL_ENOMEM => "cannot allocate memory",
        KERNEL_EACCES => "permission denied",
        KERNEL_EFAULT => "bad address",
        KERNEL_ENOTBLK => "block device required",
        KERNEL_EBUSY => "device busy",
        KERNEL_EEXIST => "file exists",
        KERNEL_EXDEV => "cross-device link",
        KERNEL_ENODEV => "operation not supported by device",
        KERNEL_ENOTDIR => "not a directory",
        KERNEL_EISDIR => "is a directory",
        KERNEL_EINVAL => "invalid argument",
        KERNEL_ENFILE => "too many open files in system",
        KERNEL_EMFILE => "too many open files",
        KERNEL_ENOTTY => "inappropriate ioctl for device",
        KERNEL_ETXTBSY => "text file busy",
        KERNEL_EFBIG => "file too large",
        KERNEL_ENOSPC => "no space left on device / error reading system storage or saved data",
        KERNEL_ESPIPE => "illegal seek",
        KERNEL_EROFS => "read-only filesystem",
        KERNEL_EMLINK => "too many links",
        KERNEL_EPIPE => "broken pipe",
        KERNEL_EDOM => "numerical argument out of domain",
        KERNEL_ERANGE => "result too large",
        KERNEL_EAGAIN => "resource temporarily unavailable / operation would block",
        KERNEL_EINPROGRESS => "operation now in progress",
        KERNEL_EALREADY => "operation already in progress",
        KERNEL_ENOTSOCK => "socket operation on non-socket",
        KERNEL_EDESTADDRREQ => "destination address required",
        KERNEL_EMSGSIZE => "message too long",
        KERNEL_EPROTOTYPE => "protocol wrong type for socket",
        KERNEL_ENOPROTOOPT => "protocol not available",
        KERNEL_EPROTONOSUPPORT => "protocol not supported",
        KERNEL_ESOCKTNOSUPPORT => "socket type not supported",
        KERNEL_ENOTSUP => "operation not supported",
        KERNEL_EPFNOSUPPORT => "protocol family not supported",
        KERNEL_EAFNOSUPPORT => "address family not supported by protocol family",
        KERNEL_EADDRINUSE => "address already in use",
        KERNEL_EADDRNOTAVAIL => "can't assign requested address",
        KERNEL_ENETDOWN => "network is down",
        KERNEL_ENETUNREACH => "network is unreachable",
        KERNEL_ENETRESET => "network dropped connection on reset",
        KERNEL_ECONNABORTED => "software caused connection abort",
        KERNEL_ECONNRESET => "connection reset by peer",
        KERNEL_ENOBUFS => "no buffer space available",
        KERNEL_EISCONN => "socket is already connected",
        KERNEL_ENOTCONN => "socket is not connected",
        KERNEL_ESHUTDOWN => "can't send after socket shutdown",
        KERNEL_ETOOMANYREFS => "too many references: can't splice",
        KERNEL_ETIMEDOUT => "operation timed out",
        KERNEL_ECONNREFUSED => "connection refused",
        KERNEL_ELOOP => "too many levels of symbolic links",
        KERNEL_ENAMETOOLONG => "file name too long",
        KERNEL_EHOSTDOWN => "host is down",
        KERNEL_EHOSTUNREACH => "no route to host",
        KERNEL_ENOTEMPTY => "directory not empty",
        KERNEL_EPROCLIM => "too many processes",
        KERNEL_EUSERS => "too many users",
        KERNEL_EDQUOT => "disc quota exceeded",
        KERNEL_ESTALE => "stale NFS file handle",
        KERNEL_EREMOTE => "too many levels of remote in path",
        KERNEL_EBADRPC => "RPC struct is bad",
        KERNEL_ERPCMISMATCH => "RPC version wrong",
        KERNEL_EPROGUNAVAIL => "RPC prog. not avail",
        KERNEL_EPROGMISMATCH => "program version wrong",
        KERNEL_EPROCUNAVAIL => "bad procedure for program",
        KERNEL_ENOLCK => "no locks available",
        KERNEL_ENOSYS => "function not implemented",
        KERNEL_EFTYPE => "inappropriate file type or format",
        KERNEL_EAUTH => "authentication error",
        KERNEL_ENEEDAUTH => "need authenticator",
        KERNEL_EIDRM => "identifier removed",
        KERNEL_ENOMSG => "no message of desired type",
        KERNEL_EOVERFLOW => "value too large to be stored in data type",
        KERNEL_ECANCELED => "operation canceled",
        KERNEL_EILSEQ => "illegal byte sequence",
        KERNEL_ENOATTR => "attribute not found",
        KERNEL_EDOOFUS => "programming error / Error when starting game (Problem with Game)",
        KERNEL_EBADMSG => "bad message",
        KERNEL_EMULTIHOP => "multi-hop attempted",
        KERNEL_ENOLINK => "link has been severed",
        KERNEL_EPROTO => "protocol error",
        KERNEL_ENOTCAPABLE => "capabilities insufficient",
        KERNEL_ECAPMODE => "not permitted in capability mode",
        KERNEL_ENOBLK => "block not ready",
        // SRTC based Error Messages
        SRTC_EPOWER => "system error (power supply)",
        SRTC_ECLOCK => "hardware error (CMOS battery/Clock)",
        SRTC_ENOTINITIALIZED => "SRTC not initialized",
        SRTC_EXPIRED => "SRTC expired",
        SRTC_EFORMAT => "SRTC invalid format",
        SRTC_EAUTHFAIL => "SRTC authentication failed",
        SRTC_KEY_DIFFER => "SRTC key-difference",
        // DevKit based Error Messages
        DEVACT_EPERM => "operation not permitted (DevKit)",
        DEVACT_ENOENT => "no such file or directory (DevKit)",
        // DRM based Error Messages
        NPDRM_EACCES => "NPDRM permission denied",
        NPDRM_EFAULT => "NPDRM bad address",
        NPDRM_EBUSY => "NPDRM was in use",
        NPDRM_EEXIST => "NPDRM EEXIST",
        NPDRM_ENODEV => "NPDRM operation not supported",
        NPDRM_EINVAL => "NPDRM invalid argument specified",
        NPDRM_ENOSPC => "NPDRM invalid size",
        NPDRM_ERANGE => "NPDRM result too large",
        NPDRM_EFMT => "NPDRM invalid format",
        NPDRM_ESIGN => "NPDRM invalid signature",
        // Auth Manager based Error Messages
        AUTHMGR_ESTACK => "AUTHMGR error with stack",
        AUTHMGR_ENEEDAUTH => "AUTHMGR needs authenticator",
        AUTHMGR_EBADMSG => "AUTHMGR bad message",
        AUTHMGR_EREVOKED => "AUTHMGR revoked",
        AUTHMGR_ENOATTR => "AUTHMGR attribute not found",
        AUTHMGR_EVER => "AUTHMGR invalid version",
        AUTHMGR_EPLATFORM => "AUTHMGR operation not supported",
        AUTHMGR_EPOWER => "AUTHMGR system error (power supply)",
        AUTHMGR_ECLOCK => "AUTHMGR hardware error (CMOS battery/clock)",
        AUTHMGR_ENOTINITIALIZED => "AUTHMGR not initialized",
        AUTHMGR_EXPIRED => "AUTHMGR authentication expired",
        AUTHMGR_EFORMAT => "AUTHMGR invalid format",
        AUTHMGR_EAUTHFAIL => "AUTHMGR authentication failed",
        AUTHMGR_KEY_DIFFER => "AUTHMGR key-difference",
        // System File based Error Messages
        SYSFILE_NOMEM => "system file Out-Of-Memory",
        SYSFILE_IO => "system file IO error",
        SYSFILE_INVAL => "system file invalid parameters",
        SYSFILE_BADMAGIC => "invalid MAGIC code (system file broken)",
        SYSFILE_KEYNOTFOUND => "key not found (system file broken)",
        SYSFILE_KEYDUPLICATION => "duplication of key (system file broken)",
        SYSFILE_BADVERSION => "invalid version (system file broken)",
        SYSFILE_OVER_DATABUFSIZE => "invalid data size (system file broken)",
        // Safemode based Error Messages
        SAFEMODE_NOMEM => "safemode Out-Of-Memory",
        SAFEMODE_KILL => "safemode killed",
        SAFEMODE_NOT_FOUND => "safemode cannot update (not found)",
        SAFEMODE_INVAL => "safemode invalid parameters",
        SAFEMODE_STAT => "safemode abnormal status",
        SAFEMODE_OPEN_READ => "safemode open-read failed",
        SAFEMODE_OPEN_WRITING => "safemode open-write failed",
        SAFEMODE_CLOSE => "safemode close failed",
        SAFEMODE_READ => "safemode read failed",
        SAFEMODE_WRITE => "safemode write failed",
        SAFEMODE_NMOUNT_USB => "safemode failed to detect USB device",
        SAFEMODE_RECOG_USB => "safemode failed to recognize USB device",
        // USBD based Error Messages
        USBD_IO => "USB Daemon I/O error",
        USBD_INVALID_ARG => "USB Daemon invalid argument",
        USBD_ACCESS => "USB Daemon permission denied",
        USBD_NO_DEVICE => "USB Daemon no such device",
        USBD_NOT_FOUND => "USB Daemon resource not found",
        USBD_BUSY => "USB Daemon resource busy",
        USBD_TIMEOUT => "USB Daemon timer expired",
        USBD_OVERFLOW => "USB Daemon value too large to be stored in data type",
        USBD_PIPE => "USB Daemon broken pipe",
        USBD_INTERRUPTED => "USB Daemon interrupted system call",
        USBD_NO_MEM => "USB Daemon not enough memory",
        USBD_NOT_SUPPORTED => "USB Daemon operation not supported",
        USBD_FATAL => "USB Daemon fatal error",
        v => todo!("strerror {v}"),
    }
}
