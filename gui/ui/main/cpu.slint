import { Button, Slider, LineEdit, HorizontalBox, VerticalBox, GroupBox } from "std-widgets.slint";

component CpuCount {
    in-out property <float> value;

    VerticalBox {
        padding: 0;
        alignment: start;

        HorizontalBox {
            padding: 0;

            Slider {
                value: value;
                minimum: 1;
                maximum: 16;
                changed(v) => {
                    value = Math.round(v);
                }
            }

            Text {
                text: value;
                width: 20px;
            }
        }

        Text {
            text: "Changing this value to other than 8 may crash the game.";
            wrap: word-wrap;
        }
    }
}

component DebugAddr {
    in-out property <string> value;

    pure callback start();

    VerticalBox {
        padding: 0;
        alignment: LayoutAlignment.start;

        HorizontalBox {
            padding: 0;

            LineEdit {
                text <=> value;
            }

            Button {
                text: "Start";
                clicked => {
                    start();
                }
            }
        }

        Text {
            text: "Specify a TCP address to listen for a debugger. The VMM will wait for a debugger to connect before start.";
            wrap: word-wrap;
        }
    }
}

export component CpuTab {
    in-out property <float> cpu-count: 8;
    in-out property <string> debug-address: "127.0.0.1:1234";

    pure callback start-debug();

    VerticalBox {
        padding: 0;
        alignment: start;

        HorizontalBox {
            padding: 0;

            GroupBox {
                title: "Count";
                width: 50%;
                CpuCount {
                    value <=> cpu-count;
                }
            }

            GroupBox {
                title: "GDB Server";
                DebugAddr {
                    value <=> debug-address;
                    start => {
                        start-debug();
                    }
                }
            }
        }
    }
}
