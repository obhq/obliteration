import { Button, Slider, LineEdit, HorizontalBox, VerticalBox, GroupBox, GridBox, ComboBox } from "std-widgets.slint";

component CpuModel {
    in property <[string]> models;
    in-out property <int> selected;

    VerticalBox {
        padding: 0;
        alignment: start;

        ComboBox {
            model: root.models;
            current-index <=> root.selected;
        }

        Text {
            text: "Using Host may cause the game running in non-Pro mode or crash the game. Note that this has no effect on non-x86 and the kernel always assume Pro.";
            wrap: word-wrap;
        }
    }
}

component CpuCount {
    in-out property <int> value;

    VerticalBox {
        padding: 0;
        alignment: start;

        HorizontalBox {
            padding: 0;

            Slider {
                value: value;
                minimum: 1;
                maximum: 16;
                changed(v) => {
                    value = Math.round(v);
                }
            }

            Text {
                text: value;
                width: 20px;
            }
        }

        Text {
            text: "Changing this value to other than 8 may crash the game.";
            wrap: word-wrap;
        }
    }
}

component DebugAddr {
    in-out property <string> value;

    pure callback start();

    VerticalBox {
        padding: 0;
        alignment: LayoutAlignment.start;

        HorizontalBox {
            padding: 0;

            LineEdit {
                text <=> value;
            }

            Button {
                text: "Start";
                clicked => {
                    start();
                }
            }
        }

        Text {
            text: "Specify a TCP address to listen for a debugger. The VMM will wait for a debugger to connect before start.";
            wrap: word-wrap;
        }
    }
}

export component CpuTab {
    in property <[string]> cpu-models;
    in-out property <int> selected-cpu;
    in-out property <int> cpu-count: 8;
    in-out property <string> debug-address;

    pure callback start-debug();

    GridBox {
        padding-top: 0;
        spacing-vertical: 0;

        GroupBox {
            title: "Model";
            row: 0;
            col: 0;
            vertical-stretch: 0;
            CpuModel {
                models: root.cpu-models;
                selected <=> root.selected-cpu;
            }
        }

        GroupBox {
            title: "Cores";
            row: 0;
            col: 1;
            vertical-stretch: 0;
            width: 50%;
            CpuCount {
                value <=> root.cpu-count;
            }
        }

        GroupBox {
            title: "GDB Server";
            row: 1;
            col: 0;
            vertical-stretch: 0;
            DebugAddr {
                value <=> root.debug-address;
                start => {
                    start-debug();
                }
            }
        }

        Rectangle {
            row: 2;
            col: 0;
            colspan: 2;
        }
    }
}
