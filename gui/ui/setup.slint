import { HorizontalBox, Button, Palette, StandardButton } from "std-widgets.slint";
import { Intro } from "setup/intro.slint";
import { Firmware } from "setup/firmware.slint";
import { Conclusion } from "setup/conclusion.slint";

// https://github.com/slint-ui/slint/issues/6880
enum WizardPage {
    Intro,
    Firmware,
    Conclusion
}

export component SetupWizard inherits Window {
    title: "Setup Obliteration";
    icon: @image-url("icon.png");
    min-width: 500px;
    min-height: 400px;
    preferred-width: 500px; // Force word-wrap instead of expand the window.

    in-out property <string> firmware-dump;

    pure callback cancel();
    pure callback browse-firmware();

    private property <WizardPage> page: WizardPage.Intro;

    states [
        finished when page == WizardPage.Conclusion: {
            next.text: "Finish";
        }
    ]

    VerticalLayout {
        if page == WizardPage.Intro: Intro {
            vertical-stretch: 1;
        }

        if page == WizardPage.Firmware: Firmware {
            firmware-dump: root.firmware-dump;
            vertical-stretch: 1;

            browse => {
                browse-firmware();
            }
        }

        if page == WizardPage.Conclusion: Conclusion {
            vertical-stretch: 1;
        }

        Rectangle {
            background: Palette.alternate-background;

            HorizontalBox {
                alignment: end;

                Button {
                    text: "＜ Back";
                    enabled: root.page != WizardPage.Intro && root.page != WizardPage.Conclusion;
                    clicked => {
                        if root.page == WizardPage.Firmware {
                            root.page = WizardPage.Intro;
                        }
                    }
                }

                next := Button {
                    text: "Next ＞";
                    clicked => {
                        if root.page == WizardPage.Intro {
                            root.page = WizardPage.Firmware;
                        } else if root.page == WizardPage.Firmware {
                            root.page = WizardPage.Conclusion;
                        }
                    }
                }

                StandardButton {
                    kind: StandardButtonKind.cancel;
                    clicked => {
                        cancel();
                    }
                }
            }
        }
    }
}
