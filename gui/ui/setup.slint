import { Intro } from "setup/intro.slint";
import { Firmware, InstallFirmware } from "setup/firmware.slint";
import { Conclusion } from "setup/conclusion.slint";
import { NavBar } from "setup/nav.slint";
import { Palette } from "std-widgets.slint";
import { ErrorPopup } from "error.slint";
import { DataRoot } from "setup/root.slint";

// https://github.com/slint-ui/slint/issues/6880
enum WizardPage {
    Intro,
    DataRoot,
    Firmware,
    Conclusion
}

export component SetupWizard inherits Window {
    in-out property <string> data-root;
    in-out property <string> firmware-dump;
    in property <string> firmware-status;
    in property <float> firmware-progress;
    in-out property <string> error-message;

    pure callback cancel <=> nav.cancel;
    pure callback browse-data-root();
    pure callback set-data-root() -> bool;
    pure callback browse-firmware();
    pure callback install-firmware();
    pure callback finish();

    title: "Setup Obliteration";
    icon: @image-url("icon.png");
    width: 500px; // PopupWindow does not resize with the window somehow.
    height: 400px; // Same here.

    private property <WizardPage> page: WizardPage.Intro;

    states [
        finished when page == WizardPage.Conclusion: {
            nav.next-text: "Finish";
        }
    ]

    VerticalLayout {
        if page == WizardPage.Intro: Intro {
            vertical-stretch: 1;
        }

        if page == WizardPage.DataRoot: DataRoot {
            path: data-root;
            vertical-stretch: 1;

            browse => {
                browse-data-root();
            }

            changed path => {
                data-root = self.path;
            }
        }

        if page == WizardPage.Firmware: Firmware {
            firmware-dump: firmware-dump;
            vertical-stretch: 1;

            browse => {
                browse-firmware();
            }

            changed firmware-dump => {
                firmware-dump = self.firmware-dump;
            }
        }

        if page == WizardPage.Conclusion: Conclusion {
            vertical-stretch: 1;
        }

        nav := NavBar {
            back-text: "＜ Back";
            back-enabled: root.page != WizardPage.Intro && root.page != WizardPage.Conclusion;
            next-text: "Next ＞";
            back-clicked => {
                if page == WizardPage.DataRoot {
                    page = WizardPage.Intro;
                } else if page == WizardPage.Firmware {
                    page = WizardPage.DataRoot;
                }
            }
            next-clicked => {
                if page == WizardPage.Intro {
                    page = WizardPage.DataRoot;
                } else if page == WizardPage.DataRoot {
                    // https://github.com/slint-ui/slint/issues/2752
                    if set-data-root() {
                        page = WizardPage.Conclusion;
                    } else {
                        page = WizardPage.Firmware;
                    }
                } else if page == WizardPage.Firmware {
                    install-firmware();
                } else if page == WizardPage.Conclusion {
                    finish();
                }
            }
        }
    }

    firmware-popup := InstallFirmware {
        x: 10px;
        y: 150px;
        width: parent.width - 20px;
        height: parent.height - 300px;
        status: firmware-status;
        progress: firmware-progress;
    }

    error-popup := ErrorPopup {
        x: 10px;
        y: (parent.height / 2) - 50px;
        width: parent.width - 20px;
        message: error-message;
        close-clicked => {
            error-message = "";
        }
    }

    public function show-firmware-installer() {
        firmware-popup.show();
    }

    public function set-firmware-finished() {
        firmware-popup.close();
        page = WizardPage.Conclusion;
    }

    changed error-message => {
        if error-message == "" {
            error-popup.close();
        } else {
            error-popup.show();
        }
    }
}
