import { VerticalBox, HorizontalBox, Button, ComboBox } from "std-widgets.slint";
import { Menu } from "main/menu.slint";
import { DisplayTab } from "main/display.slint";
import { CpuTab } from "main/cpu.slint";

export { WaitForDebugger } from "debug.slint";
export { ErrorWindow } from "error.slint";
export { InstallFirmware, SetupWizard } from "setup.slint";

enum Tab {
    menu,
    display,
    cpu
}

export component MainWindow inherits Window {
    in property <[string]> devices;
    in property <[string]> resolutions;
    in-out property <int> selected-resolution;
    in-out property <string> debug-address;
    in property <[string]> profiles;
    in-out property <int> selected-profile;

    callback profile-selected();
    pure callback save-profile();
    pure callback report-issue();
    pure callback start-vmm();
    pure callback start-debug();

    title: "Obliteration";
    icon: @image-url("icon.png");
    min-width: 1000px;
    min-height: 500px;

    private property <Tab> tab: Tab.display;

    VerticalBox {
        // Tab bar.
        HorizontalBox {
            padding: 0;

            Button {
                icon: @image-url("main/menu.svg");
                colorize-icon: true;
                primary: tab == Tab.menu;
                clicked => {
                    tab = Tab.menu
                }
            }

            Button {
                text: "Display";
                icon: @image-url("main/monitor.svg");
                colorize-icon: true;
                primary: tab == Tab.display;
                horizontal-stretch: 1;
                clicked => {
                    tab = Tab.display
                }
            }

            Button {
                text: "CPU";
                icon: @image-url("main/cpu-64-bit.svg");
                colorize-icon: true;
                primary: tab == Tab.cpu;
                horizontal-stretch: 1;
                clicked => {
                    tab = Tab.cpu
                }
            }
        }

        // Tab content.
        if tab == Tab.menu: Menu {
            vertical-stretch: 1;

            report-issue => {
                report-issue();
            }
        }

        if tab == Tab.display: DisplayTab {
            devices: devices;
            resolutions: resolutions;
            selected-resolution <=> selected-resolution;
            vertical-stretch: 1;
        }

        if tab == Tab.cpu: CpuTab {
            debug-address <=> debug-address;
            vertical-stretch: 1;
            start-debug => {
                start-debug();
            }
        }

        // Profile + actions.
        HorizontalBox {
            padding: 0;

            ComboBox {
                model: profiles;
                current-index <=> selected-profile;
                horizontal-stretch: 1;
                selected => {
                    profile-selected();
                }
            }

            Button {
                text: "Save";
                icon: @image-url("main/save.svg");
                colorize-icon: true;
                clicked => {
                    save-profile();
                }
            }

            Button {
                text: "Start";
                icon: @image-url("main/start.svg");
                colorize-icon: true;
                clicked => {
                    start-vmm();
                }
            }
        }
    }
}
